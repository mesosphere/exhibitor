package com.netflix.exhibitor.core.config.gcs;

import com.google.api.client.http.HttpResponseException;
import com.google.api.client.util.DateTime;
import com.google.api.services.storage.model.StorageObject;
import com.netflix.exhibitor.core.config.*;
import com.netflix.exhibitor.core.gcs.GcsClient;
import com.netflix.exhibitor.core.gcs.GcsClientFactory;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;

public class GcsConfigProvider implements ConfigProvider {
    private final GcsConfigArguments arguments;
    private final GcsClient gcsClient;
    private final String hostname;
    private final Properties defaults;

    public static final String AUTO_GENERATED_NOTE = "Auto-generated by Exhibitor on %s";
    public static final int HTTP_NOT_FOUND = 404;

    /**
     * @param factory     the factory
     * @param arguments   args
     * @param hostname    this VM's hostname
     * @throws Exception errors
     */
    public GcsConfigProvider(GcsClientFactory factory, GcsConfigArguments arguments,
                               String hostname) throws Exception {
        this(factory, arguments, hostname, new Properties());
    }

    /**
     * @param factory     the factory
     * @param arguments   args
     * @param hostname    this VM's hostname
     * @param defaults    default props
     * @throws Exception errors
     */
    public GcsConfigProvider(GcsClientFactory factory, GcsConfigArguments arguments,
                               String hostname, Properties defaults) throws Exception {
        this.arguments = arguments;
        this.hostname = hostname;
        this.defaults = defaults;
        gcsClient = factory.makeNewClient();
    }

    public GcsClient getClient() {
        return gcsClient;
    }

    @Override
    public void start() throws Exception {
        // NOP
    }

    @Override
    public void close() throws IOException {
        gcsClient.close();
    }

    @Override
    public PseudoLock newPseudoLock() throws Exception {
        return new GcsPseudoLock
                (
                        gcsClient,
                        arguments.getBucketName(),
                        arguments.getLockArguments().getPrefix(),
                        arguments.getLockArguments().getTimeoutMs(),
                        arguments.getLockArguments().getPollingMs(),
                        arguments.getLockArguments().getSettlingMs()
                );
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception {
        long lastModified;
        Properties properties;

        Properties configObject = getConfigObject();
        if (configObject != null) {
            lastModified = getConfigObjectMetadata().getUpdated().getValue();
            properties = configObject;
        } else {
            lastModified = new Date(0L).getTime();
            properties = new Properties();
        }

        PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(config, lastModified);
    }

    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareVersion) throws Exception {
        {
            StorageObject metadata = getConfigObjectMetadata();
            if (metadata != null) {
                DateTime lastModified = metadata.getUpdated();
                if (lastModified.getValue() != compareVersion) {
                    return null;    // pattern copied from S3ConfigProvider - Gcs may support a better way
                }
            }
        }

        PropertyBasedInstanceConfig propertyBasedInstanceConfig = new PropertyBasedInstanceConfig(config);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        propertyBasedInstanceConfig.getProperties().store(out, String.format(AUTO_GENERATED_NOTE, hostname));

        byte[] bytes = out.toByteArray();
        gcsClient.putObject(bytes, arguments.getBucketName(), arguments.getObjectName());

        StorageObject metadata = getConfigObjectMetadata();
        return new LoadedInstanceConfig(propertyBasedInstanceConfig, metadata.getUpdated().getValue());
    }

    private StorageObject getConfigObjectMetadata() throws Exception {
        try {
            StorageObject metadata = gcsClient.getObjectMetadata(arguments.getBucketName(), arguments.getObjectName());
            if (metadata.getSize().intValue() > 0) {
                return metadata;
            }
        } catch (HttpResponseException e) {
            if (!isNotFoundError(e)) {
                throw e;
            }
        }
        return null;
    }

    private Properties getConfigObject() throws Exception {
        Properties props = new Properties();
        try {
            byte[] content = gcsClient.getObject(arguments.getBucketName(), arguments.getObjectName()).toByteArray();
            props.load(new ByteArrayInputStream(content));
            return props;
        } catch (HttpResponseException e) {
            if (!isNotFoundError(e)) {
                throw e;
            }
        }
        return null;
    }

    private boolean isNotFoundError(HttpResponseException e) {
        return (e.getStatusCode() == HTTP_NOT_FOUND);
    }

}